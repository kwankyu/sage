# Triggers after the documentation build has finished,
# taking the artifact and uploading it to netlify
name: Publish documentation

on:
  workflow_run:
    workflows: ["Build documentation"]
    types:
      - completed

permissions:
  statuses: write
  checks: write
  pull-requests: write

jobs:
  publish-doc:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    env:
      CAN_DEPLOY: ${{ secrets.NETLIFY_AUTH_TOKEN != '' &&  secrets.NETLIFY_SITE_ID != '' }}
    steps:
      - name: Get information about workflow origin
        uses: potiuk/get-workflow-origin@v1_6
        id: source-run-info
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          sourceRunId: ${{ github.event.workflow_run.id }}
        if: env.CAN_DEPLOY == 'true'

      - name: Download doc
        id: download-doc
        uses: actions/download-artifact@v4
        with:
          name: doc
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          run-id: ${{ github.event.workflow_run.id }}
        if: ${{ steps.source-run-info.outputs.sourceEvent == 'pull_request' || steps.source-run-info.outputs.sourceEvent == 'push' && steps.source-run-info.outputs.targetBranch == 'develop' }}

      - name: Extract doc
        run: unzip doc.zip -d doc
        if: steps.download-doc.outcome == 'success'

      - name: Deploy to Netlify
        uses: netlify/actions/cli@master
        with:
          args: deploy --dir=doc/doc --message ${NETLIFY_MESSAGE} --alias ${NETLIFY_ALIAS}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_MESSAGE:  doc-${{ steps.source-run-info.outputs.pullRequestNumber && format('pr-{0}', steps.source-run-info.outputs.pullRequestNumber) || 'develop' }}
          NETLIFY_ALIAS: doc-${{ steps.source-run-info.outputs.pullRequestNumber && format('pr-{0}', steps.source-run-info.outputs.pullRequestNumber) || 'develop' }}
        if: steps.download-doc.outcome == 'success'

      # Add deployment as status check, PR comment and annotation
      # we could use the nwtgck/actions-netlify action for that, except for that it is not (yet) working in workflow_run context: https://github.com/nwtgck/actions-netlify/issues/545
      - name: Add/Update deployment status PR comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          number: ${{ steps.source-run-info.outputs.pullRequestNumber }}
          header: preview-comment
          recreate: false
          message: |
            [Documentation preview for this PR](${{ steps.deploy-netlify.outputs.NETLIFY_URL }}/html/en) (built with commit ${{ steps.source-run-info.outputs.sourceHeadSha }}; [changes](${{ steps.deploy-netlify.outputs.NETLIFY_URL }}/CHANGES.html)) is ready! :tada:
            This preview will update shortly after each push to this PR.
        if: steps.download-doc.outcome == 'success'

      - name: Update deployment status PR check
        uses: myrotvorets/set-commit-status-action@v2.0.1
        if: ${{ always() }}
        env:
          DEPLOY_SUCCESS: Successfully deployed preview.
          DEPLOY_FAILURE: Failed to deploy preview.
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status == 'success' && 'success' || 'failure' }}
          sha: ${{ github.event.workflow_run.head_sha }}
          context: Deploy Documentation
          targetUrl: ${{ steps.deploy-netlify.outputs.NETLIFY_URL }}
          description: ${{ job.status == 'success' && env.DEPLOY_SUCCESS || env.DEPLOY_FAILURE }}

      - name: Report deployment url
        run: |
          echo "::notice::The documentation has been deployed - ${{ steps.deploy-netlify.outputs.NETLIFY_URL }}"

  publish-live-doc:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    env:
      CAN_DEPLOY: ${{ secrets.NETLIFY_AUTH_TOKEN != '' &&  secrets.NETLIFY_SITE_ID != '' }}
    steps:
      - name: Get information about workflow origin
        uses: potiuk/get-workflow-origin@v1_6
        id: source-run-info
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          sourceRunId: ${{ github.event.workflow_run.id }}
        if: env.CAN_DEPLOY == 'true'

      - name: Download live doc
        id: download-doc
        uses: actions/download-artifact@v4
        with:
          name: livedoc
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          run-id: ${{ github.event.workflow_run.id }}
        if: ${{ steps.source-run-info.outputs.sourceEvent == 'push' || steps.source-run-info.outputs.targetBranch != 'develop' }}

      - name: Extract live doc
        run: unzip livedoc.zip -d livedoc
        if: steps.download-doc.outcome == 'success'

      - name: Deploy to Netlify
        uses: netlify/actions/cli@master
        with:
          args: deploy --dir=livedoc/livedoc --message ${NETLIFY_MESSAGE} --alias ${NETLIFY_ALIAS}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_MESSAGE: doc-${{ steps.source-run-info.outputs.targetBranch }}
          NETLIFY_ALIAS: doc-${{ steps.source-run-info.outputs.targetBranch }}
        if: steps.download-doc.outcome == 'success'

      - name: Report deployment url
        if: steps.download-doc.outcome == 'success'
        run: |
          echo "::notice::The live documentation has been deployed - ${{ steps.deploy-netlify.outputs.NETLIFY_URL }}"
